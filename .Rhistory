coordenadas <- do.call(rbind.data.frame, ubicacion$location)
names(coordenadas)<- c('x','y')
ubicacion$x <- coordenadas$x; ubicacion$y<-coordenadas$y
remove(coordenadas, alba)
library(gganimate)
ubicacion <- ubicacion %>% mutate(minute=ifelse(minute>=90, 90, minute),
rango_minutos = ceiling(minute/10)*10) %>%
filter(rango_minutos>=10)
d <- ubicacion %>% ggplot(aes(x=x, fill=rango_minutos)) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_reveal(rango_minutos, keep_last = FALSE) +
shadow_mark(alpha=0.3)
d
ubicacion %>% ggplot(aes(x=x, fill=rango_minutos)) +
geom_density(alpha=0.9)
d <- ubicacion %>% ggplot(aes(x=x, fill=as.factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_reveal(rango_minutos, keep_last = FALSE) +
shadow_mark(alpha=0.3)
d
d <- ubicacion %>% ggplot(aes(x=x, fill=as.factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_reveal(rango_minutos, keep_last = FALSE) +
shadow_mark(alpha=0.3) + enter_fade() + exit_fade()
d
d <- ubicacion %>% ggplot(aes(x=x, fill=as.factor(rango_minutos), group=rango_minutos)) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_reveal(rango_minutos, keep_last = FALSE) + enter_fade() + exit_fade()
d
d <- ubicacion %>% ggplot(aes(x=x, fill=as.factor(rango_minutos), group=rango_minutos)) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_time(rango_minutos)
d
d <- gapminder::gapminder %>%
ubicacion %>% ggplot(aes(x=x, fill=as.factor(rango_minutos), group=rango_minutos)) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_time(rango_minutos)
d <- ubicacion %>%
gapminder::gapminder %>%
ggplot(aes(x=x, fill=as.factor(rango_minutos), group=rango_minutos)) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_time(rango_minutos)
gapminder::gapminder
d <- ubicacion %>%
gapminder::gapminder %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_time(rango_minutos)
d <- ubicacion %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none') +
transition_time(rango_minutos)
d
d <- ubicacion %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none')
d + transition_time(rango_minutos)
install.packages("transformr")
library(transformr )
ubicacion <- ubicacion %>% mutate(minute=ifelse(minute>=90, 90, minute),
rango_minutos = ceiling(minute/10)*10) %>%
filter(rango_minutos>=10)
d <- ubicacion %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
theme(legend.position='none')
d + transition_time(rango_minutos)
library(tidyverse)
library(ggsoccer)
# Lo pintamos en el campo
ggplot() +
annotate_pitch() +
ggtitle("Campo sin nada") +
theme_pitch()
messi_data <- readRDS('./data/messi_data.rds')
alba <- messi_data %>% filter(player.name=='Jordi Alba Ramos')
ubicacion <- alba$location
ubicacion <- do.call(rbind.data.frame, ubicacion)
remove(alba)
names(ubicacion)<- c('x','y')
# Lo pintamos en el campo
ubicacion %>%
ggplot(aes(x=x, y=y) ) +
annotate_pitch() +
geom_bin2d(binwidth = c(2, 2), alpha=0.7) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch()
penalties <- messi_data %>% sample_frac(0.1) %>% filter(shot.type.name=='Penalty') %>%
select(location)
# Los rangos van distintos. Cambiamos de base
ubicacion$x = ubicacion$x/(119/100)
ubicacion$y = 100-ubicacion$y/(80/100)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a") +
geom_bin2d(binwidth = c(1, 1), alpha=0.3) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605")) +
direction_label(x_label = 60)
direction_label
Ya es un _heatmap_ con mejor pinta aunque muy mejorable y se parece a lo que estamos esperando de Jordi Alba y es que es recomendable conocer como se mueve un jugador a la hora de usar ggsoccer para ajustar bien las bases. Sé que exite la función to_statsbomb en ggsoccer pero prefiero que se entienda la problemática de la base.
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a") +
geom_bin2d(binwidth = c(1, 1), alpha=0.3) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605")) +
direction_label(x_label = 50, label = c("Dirección"))
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a") +
geom_bin2d(binwidth = c(1, 1), alpha=0.3) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605")) +
direction_label(x_label = 50)
trace(direction_label, edit=TRUE)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a", colour = "white", goals = goals_line) +
stat_density_2d(color='blue', alpha=0.5) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE, alpha=0.5)+
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605"),
legend.position='none',
plot.title=element_text(size=20)) +
direction_label(x_label = 50)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a", colour = "white", goals = goals) +
stat_density_2d(color='blue', alpha=0.5) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE, alpha=0.5)+
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605"),
legend.position='none',
plot.title=element_text(size=20)) +
direction_label(x_label = 50)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a", colour = "white") +
stat_density_2d(color='blue', alpha=0.5) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE, alpha=0.5)+
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605"),
legend.position='none',
plot.title=element_text(size=20)) +
direction_label(x_label = 50)
trace(direction_label, edit=TRUE)
ubicacion %>% ggplot(aes(x=x)) + geom_density()
ubicacion %>% ggplot(aes(x=y)) + geom_density()
alba <- messi_data %>% filter(player.name=='Jordi Alba Ramos')
ubicacion <- alba$location
ubicacion <- do.call(rbind.data.frame, ubicacion)
remove(alba)
names(ubicacion)<- c('x','y')
# Lo pintamos en el campo
ubicacion %>%
ggplot(aes(x=x, y=y) ) +
annotate_pitch() +
geom_bin2d(binwidth = c(2, 2), alpha=0.7) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch()
# Los rangos van distintos. Cambiamos de base
ubicacion$x = ubicacion$x/(119/100)
ubicacion$y = 100-ubicacion$y/(80/100)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a") +
geom_bin2d(binwidth = c(1, 1), alpha=0.3) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605")) +
direction_label(x_label = 50)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a", colour = "white") +
stat_density_2d(color='blue', alpha=0.5) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE, alpha=0.5)+
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605"),
legend.position='none',
plot.title=element_text(size=20)) +
direction_label(x_label = 50)
ubicacion %>% ggplot(aes(x=x)) + geom_density()
ubicacion %>% ggplot(aes(x=y)) + geom_density()
# install.packages("remotes")
# remotes::install_github("torvaney/ggsoccer")
library(tidyverse)
library(ggsoccer)
# Lo pintamos en el campo
ggplot() +
annotate_pitch() +
ggtitle("Campo sin nada") +
theme_pitch()
messi_data <- readRDS('./data/messi_data.rds')
alba <- messi_data |> filter(player.name=='Jordi Alba Ramos')
alba <- messi_data |> filter(player.name=='Jordi Alba Ramos')
alba <- messi_data %>% filter(player.name=='Jordi Alba Ramos')
ubicacion <- alba$location
ubicacion <- do.call(rbind.data.frame, ubicacion)
remove(alba)
names(ubicacion)<- c('x','y')
# Lo pintamos en el campo
ubicacion %>%
ggplot(aes(x=x, y=y) ) +
annotate_pitch() +
geom_bin2d(binwidth = c(2, 2), alpha=0.7) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch()
trace(direction_label, edit=TRUE)
# Los rangos van distintos. Cambiamos de base
ubicacion$x = ubicacion$x/(119/100)
ubicacion$y = 100-ubicacion$y/(80/100)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a") +
geom_bin2d(binwidth = c(1, 1), alpha=0.3) +
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605")) +
direction_label(x_label = 50)
trace(direction_label, edit=TRUE)
trace(direction_label, edit=TRUE)
ggplot(ubicacion, aes(x=x, y=y) ) +
annotate_pitch(fill = "#3ab54a", colour = "white") +
stat_density_2d(color='blue', alpha=0.5) +
stat_density_2d(geom = "raster",
aes(fill = after_stat(density)),
contour = FALSE, alpha=0.5)+
scale_fill_gradient2(low="blue", high = "red") +
ggtitle("Zona de juego de Jordi Alba") +
theme_pitch() +
theme(panel.background = element_rect(fill = "#55B605"),
legend.position='none',
plot.title=element_text(size=20)) +
direction_label(x_label = 50)
ubicacion %>% ggplot(aes(x=x)) + geom_density()
ubicacion %>% ggplot(aes(x=y)) + geom_density()
library(gganimate)
library(transformr )
ubicacion <- ubicacion %>% mutate(minute=ifelse(minute>=90, 90, minute),
rango_minutos = ceiling(minute/10)*10) %>%
filter(rango_minutos>=10)
alba <- messi_data %>% filter(player.name=='Jordi Alba Ramos')
ubicacion <- alba %>% select(location, minute) %>%
filter(location != "NULL")
coordenadas <- do.call(rbind.data.frame, ubicacion$location)
names(coordenadas)<- c('x','y')
ubicacion$x <- coordenadas$x; ubicacion$y<-coordenadas$y
remove(coordenadas, alba)
library(gganimate)
library(transformr )
ubicacion <- ubicacion %>% mutate(minute=ifelse(minute>=90, 90, minute),
rango_minutos = ceiling(minute/10)*10) %>%
filter(rango_minutos>=10)
d <- ubicacion %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
coord_cartesian(ylim=c(0, 0.02), xlim=c(0, 102)) +
theme(legend.position='none')
d + transition_time(rango_minutos)
anim_save("animacion1.gif")
library(gganimate)
library(transformr )
ubicacion <- ubicacion %>% mutate(minute=ifelse(minute>=90, 90, minute),
rango_minutos = ceiling(minute/5)*5) %>%
filter(rango_minutos>=5)
d <- ubicacion %>%
ggplot(aes(x=x, fill=factor(rango_minutos))) +
geom_density(alpha=0.9) +
coord_cartesian(ylim=c(0, 0.02), xlim=c(0, 102)) +
theme(legend.position='none')
d + transition_time(rango_minutos)
anim_save("animacion1.gif")
trace(direction_label, edit=TRUE)
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = c(2015:2023), tier = "1st"))
alineaciones <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_lineups(partidos[i,1])
alineaciones <- rbind.data.frame(alineaciones, ax)
}
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = c(2015:2023), tier = "1st"))
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = c(2020:2023), tier = "1st"))
partidos <- partidos %>% filter(grepl("Real-Madrid",url) >0 )
alineaciones <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_lineups(partidos[i,1])
alineaciones <- rbind.data.frame(alineaciones, ax)
}
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = c(2022:2023), tier = "1st"))
partidos <- partidos %>% filter(grepl("Real-Madrid",url) >0 )
View(partidos)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = 2023, tier = "1st"))
partidos <- partidos %>% filter(grepl("Real-Madrid",url) >0 )
alineaciones <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_lineups(partidos[i,1])
alineaciones <- rbind.data.frame(alineaciones, ax)
}
View(alineaciones)
View(alineaciones)
alineaciones <- alineaciones %>% mutate(local =substr(MatchURL,30, length(MatchURL)),
local = substr(local, str_locate(local, "/")[,1]+1, length(MatchURL)))
View(alineaciones)
View(alineaciones)
View(alineaciones)
alineaciones <- alineaciones %>%
mutate(equipo = case_when(
substr(local,1,11)=='Real-Madrid' & Home_Away=='Home' ~ "RM",
substr(local,1,11) != 'Real-Madrid' & Home_Away=='Away' ~ "RM",
TRUE ~ 'Rival'  ))
table(alineaciones_RM$Player_Name)
table(alineaciones$Player_Name)
alineaciones <- alineaciones %>%
mutate(equipo = case_when(
substr(local,1,11)=='Real-Madrid' & Home_Away=='Home' ~ "RM",
substr(local,1,11) != 'Real-Madrid' & Home_Away=='Away' ~ "RM",
TRUE ~ 'Rival'  ))
alineaciones_RM <- alineaciones %>% filter(equipo=="RM")
table(alineaciones$Player_Name)
alineaciones_RM %>% group_by(Player_Name) %>% summarise(conteo=n()) %>%
arrange(desc(conteo))
View(alineaciones_RM)
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(conteo=n()) %>%
arrange(desc(conteo))
View(alineaciones_RM)
View(alineaciones)
View(alineaciones)
alineaciones <- alineaciones %>% mutate(local =substr(MatchURL,30, length(MatchURL)),
local = substr(local, str_locate(local, "/")[,1]+1, length(MatchURL)),
local = str_replace(local,'El-Derbi-Madrileno-',''),
local = str_replace(local, 'El-Clasico-',''))
View(alineaciones)
alineaciones <- alineaciones %>%
mutate(equipo = case_when(
substr(local,1,11)=='Real-Madrid' & Home_Away=='Home' ~ "RM",
substr(local,1,11) != 'Real-Madrid' & Home_Away=='Away' ~ "RM",
TRUE ~ 'Rival'  ))
alineaciones_RM <- alineaciones %>% filter(equipo=="RM")
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(conteo=n()) %>%
arrange(desc(conteo))
View(alineaciones_RM)
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(conteo=n()) %>%
arrange(desc(conteo)) %>%
ggplot(aes(x=Player_Name, y=conteo)) +
geom_bar(stat = "identity") +
coord_flip()
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(Partidos=n()) %>%
mutate(Nombre = fct_reorder(Player_Name, Partidos))
ggplot(aes(x=Nombre, y=Partidos)) +
geom_bar(stat = "identity") +
coord_flip()
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(Partidos=n()) %>%
mutate(Nombre = fct_reorder(Player_Name, Partidos)) %>%
ggplot(aes(x=Nombre, y=Partidos)) +
geom_bar(stat = "identity") +
coord_flip()
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(Partidos=n()) %>%
mutate(Jugador = fct_reorder(Player_Name, Partidos)) %>%
ggplot(aes(x=Nombre, y=Partidos)) +
geom_bar(stat = "identity") +
coord_flip()
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(Partidos=n()) %>%
mutate(Jugador = fct_reorder(Player_Name, Partidos)) %>%
ggplot(aes(x=Jugador, y=Partidos)) +
geom_bar(stat = "identity") +
coord_flip()
alineaciones_RM %>% group_by(Player_Name) %>%
filter(Starting=='Pitch') %>%
summarise(Partidos=n()) %>%
mutate(Jugador = fct_reorder(Player_Name, Partidos)) %>%
ggplot(aes(x=Jugador, y=Partidos)) +
geom_bar(stat = "identity") +
coord_flip() +
theme_classic()
View(alineaciones)
table(alineaciones$Team)
View(alineaciones)
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = 2023, tier = "1st"))
library(worldfootballR)
library(tidyverse)
# Toda la información la extraemos de FBRef
# Extraemos los partidos
partidos <- data.frame(url=fb_match_urls(country = "ESP", gender = "M",
season_end_year = 2023, tier = "1st"))
partidos <- partidos %>% filter(grepl("Espanyol",url) >0 )
View(partidos)
alineaciones <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_lineups(partidos[i,1])
alineaciones <- rbind.data.frame(alineaciones, ax)
}
View(alineaciones)
alineaciones <- alineaciones %>% mutate(local =substr(MatchURL,30, length(MatchURL)),
local = substr(local, str_locate(local, "/")[,1]+1, length(MatchURL)),
local = str_replace(local,'El-Derbi-Madrileno-',''),
local = str_replace(local, 'El-Clasico-',''))
alineaciones <- alineaciones %>% mutate(local =substr(MatchURL,30, length(MatchURL)),
local = substr(local, str_locate(local, "/")[,1]+1, length(MatchURL)),
local = str_replace(local,'El-Derbi-Madrileno-',''),
local = str_replace(local, 'El-Clasico-',''))
alineaciones <- alineaciones %>%
mutate(equipo = case_when(
substr(local,1,11)=='Espanyol' & Home_Away=='Home' ~ "Espanyol",
substr(local,1,11) != 'Espanyol' & Home_Away=='Away' ~ "Espanyol",
TRUE ~ 'Rival'  ))
alineaciones_Espanyol <- alineaciones %>% filter(equipo=="Espanyol")
View(alineaciones_Espanyol)
View(alineaciones_Espanyol)
porteros <- alineaciones_Espanyol %>% filter(Pos=='GK')
table(porteros$Player_Name)
View(porteros)
View(alineaciones_Espanyol)
table(alineaciones_Espanyol$Player_Name)
View(partidos)
View(alineaciones)
alineaciones <- alineaciones %>%
mutate(equipo = case_when(
substr(local,1,8)=='Espanyol' & Home_Away=='Home' ~ "Espanyol",
substr(local,1,8) != 'Espanyol' & Home_Away=='Away' ~ "Espanyol",
TRUE ~ 'Rival'  ))
alineaciones_Espanyol <- alineaciones %>% filter(equipo=="Espanyol")
table(alineaciones_Espanyol$Player_Name)
porteros <- alineaciones_Espanyol %>% filter(Pos=='GK')
table(porteros$Player_Name)
report <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_report(partidos[i,1])
alineaciones <- rbind.data.frame(alineaciones, ax)
}
report <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_report(partidos[i,1])
report <- rbind.data.frame(report, ax)
}
View(report)
View(report)
report <- tibble()
for (i in seq(1:nrow(partidos))) {
ax <- fb_match_summary(partidos[i,1])
report <- rbind.data.frame(report, ax)
}
View(report)
